insmod regexp;

#一些自定义函数

#显示no_find错误信息
function funcErrorNoFind {
  if test "${lang}" = "zh_cn"; then
    echo;
    echo;
    echo "错误!";
    echo "找不到 [$1] !";
    echo;
    echo -n "按[ESC]继续.....    ";
    if test -z "$2"; then
      sleep --verbose --interruptible $2;
    else
      sleep --interruptible 999;
    fi;
  else 
    echo;
    echo;
    echo "Error!";
    echo "Can't find [$1] !";
    echo;
    echo -n "Press the [ESC] key to continue.....    ";
    if test -z "$2"; then
      sleep --verbose --interruptible $2;
    else
      sleep --interruptible 999;
    fi;
  fi;
  return 1;
}

#显示no_find or can_no_read错误信息
function funcErrorNoFindOrCanNotRead {
  if test "${lang}" = "zh_cn"; then
    echo;
    echo;
    echo "错误!";
    echo "找不到 或 无法读取 [$1] !";
    echo;
    echo -n "按[ESC]继续.....    ";
    if test -z "$2"; then
      sleep --verbose --interruptible $2;
    else
      sleep --interruptible 999;
    fi;
  else 
    echo;
    echo;
    echo "Error!";
    echo "Can't find or read [$1] !";
    echo;
    echo -n "Press the [ESC] key to continue.....    ";
    if test -z "$2"; then
      sleep --verbose --interruptible $2;
    else
      sleep --interruptible 999;
    fi;
  fi;
  return 1;
}

#生成1-9a-z字符序列
#循环生成，在sequence中返回
#参数0 或者 unset sequence ，关闭队列。
function funcGetSequence {
	#关闭序列
	if test "$1" = "0"; then
		unset sequence;
		return 1;
	fi
	#生成备选序列
	setparams "1" "2" "3" "4" "5" "6" "7" "8" "9"\
			"A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M"\
			"N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z";
	#移动到当前序列位置
	while test "$sequence" != "$1" -a "$#" -gt "1"; do
		shift;
	done;
	#判断序列结束
	if test "$#" -le "1"; then
		set sequence=1;
		return 0;
	fi;
	#设置sequence到下一序列
	shift;
	set sequence=$1;
	return 0;
}

#去掉路径中的“msdos”,输入参数1返回到$str中
function funcRemoveCharMSDOS {
	if regexp '^\([[:alpha:]]+[[:digit:]]+,[mM][sS][dD][oO][sS][[:digit:]]+\)' "$1"; then
		set str_1=;
		set str_2=;
		regexp --set=str_1 '(^\([[:alpha:]]+[[:digit:]]+,)[mM][sS][dD][oO][sS][[:digit:]]+\).*$' "$1";
		regexp --set=str_2 '^\([[:alpha:]]+[[:digit:]]+,[mM][sS][dD][oO][sS]([[:digit:]]+\).*$)' "$1";
		set str="${str_1}${str_2}";
		unset str_1;
		unset str_2;
		return 0;
	else
		set str="$1";
		return 1;
	fi;
}

#获取文件扩展名,输入参数1返回到$str中
function funcGetFileExtName {
	if regexp --set=str '^.*\.(.*$)' "$1"; then
		return 0;
	else
		unset str;
		return 1;
	fi
}

#获取不带括号的驱动器和分区名，输入参数1返回到$str中
function funcGetDevName {
	if regexp --set=str '^\(([0-9a-zA-Z,]+)\).*$' "$1"; then
		return 0;
	else
		unset str;
		return 1;
	fi
}

#字母转换小写，输入参数1返回到$letter中
function funcToLowerCaseLetter {
	#处理变量
	set letter="$1";
	#生成备选序列
	setparams "A" "a" "B" "b" "C" "c" "D" "d" "E" "e" "F" "f"\
						"G" "g" "H" "h" "I" "i" "J" "j" "K" "k" "L" "l"\
						"M" "m" "N" "n" "O" "o" "P" "p" "Q" "q" "R" "r"\
						"S" "s" "T" "t" "U" "u" "V" "v" "W" "w" "X" "x"\
						"Y" "y" "Z" "z";
	#查找大写字母
	while test "${letter}" != "$1" -a "$#" -gt "2"; do
		shift 2;
	done;
	#检查是否找到
	if test "$#" -lt "2"; then
		unset letter;
		return 1;
	fi
	#获得对应到小写字母
	shift;
	set letter="$1";
	return 0;
}

#字符串转换小写,输入参数1返回到$str中(使用$letter $str_1 $str_2 $str_3)
function funcToLowerCase {
	#处理变量
	set str="$1";
	set str_1="";
	set str_2="";
	set str_3="";
	set letter="";
	#转换到小写
	while regexp --set=2:str_2 '(^.*)([A-Z])(.*$)' "${str}"; do
		regexp --set=1:str_1 '(^.*)([A-Z])(.*$)' "${str}";
		regexp --set=3:str_3 '(^.*)([A-Z])(.*$)' "${str}";
		#单个字母转小写
		funcToLowerCaseLetter "${str_2}";
		if test "$?" = "1"; then
			set ${str}="";
		fi
		set str_2="${letter}";
		#合并字符串
		set str="${str_1}${str_2}${str_3}";
		#清空临时变量
		set str_1="";
		set str_2="";
		set str_3="";
		set letter="";
	done;
	#清理并返回成功
	unset str_1;
	unset str_2;
	unset str_3;
	unset letter;
	if test -z ${str}; then
		unset str;
		return 1;
	fi
	return 0;
}

#减1,输入参数1返回$str。使用$fag $str_final $str_end
function funcDec {
	#初始化变量
	set str="$1";
	set fag="1";
	set str_final="";
	set str_end="";
	#循环处理,直到借位标志$fag不为1
	while test "${fag}" = "1" ; do
		#生成序列
		setparams "9" "8" "7" "6" "5" "4" "3" "2" "1" "0";
		#提取最后一位
		regexp --set=str_end '^.*(.$)' "${str}";
		if test "$?" != "0"; then
			#字符串为空
			set fag="-1";
			break;
		fi
		#去掉$str最后一位
		regexp --set=str '(^.*).$' "${str}";
		#查找所在序列位置
		until test "${str_end}" = "$1" -o "$#" -le "0"; do
			shift;
		done;
		#检查非法字符
		if test "$#" -le "0"; then
			set fag="-1";
			break;
		fi
		#检查是否借位并保持当前位
		if test "$1" = "0"; then
			#需要借位
			set str_final="9${str_final}";
		else
			#不需借位
			set fag="0";
			shift;
			set str_final="$1${str_final}";
		fi
	done;
	#合拼字符串到$str
	set str="${str}${str_final}";
	#去除首位到“0”
	regexp --set=str '^0*([^0].*$)' "${str}";
	#清理环境变量
	unset str_final;
	unset str_end;
	#检查错误并输出结果
	if test "${fag}" = "-1"; then
		unset str;
		unset fag;
		return 1;
	else
		unset fag;
		return 0;
	fi
}

#转换到Grub4Dos路径格式,参数1输入$str输出。使用$str_1 $str_2 $str_3
function funcToG4dPath {
	#分区号
	regexp --set=1:str_1 --set=2:str_2 --set=3:str_3 '(^\([[:alpha:]]+[[:digit:]]+,)[mM]?[sS]?[dD]?[oO]?[sS]?([[:digit:]]+)(\).*$)' "$1";
	if test "$?" = "0"; then
		if funcDec "${str_2}"; then
			set str="${str_1}${str}${str_3}";
		else
			set str="";
		fi
	else
		set str="$1";
	fi
	#空格
	set str_3="";
	while regexp --set=1:str_1 --set=2:str '(^[^ ]*)[ ](.*$)' "${str}"; do
		set str_3="${str_3}${str_1}"'\\ ';
	done;
	set str="${str_3}${str}"
	#清理
	unset str_1;
	unset str_2;
	unset str_3;
	if test -z "${str}"; then
		unset str;
		return 1;
	else
		return 0;
	fi
}
