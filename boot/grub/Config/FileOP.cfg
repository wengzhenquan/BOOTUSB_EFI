insmod regexp;
source ${prefix}/Config/Tools.cfg;

#文件操作菜单
#  可识别.iso .img .ima .vhd .vhdx .vmdk .lzma .gz ntldr bootmgr .cfg .lst
# 挂载为[软盘]并启动 挂载为[硬盘]并启动 挂载为[光盘]并启动 
# 当作[Windows引导文件]运行 当作[Grub引导文件]运行 当作[Grub2菜单文件]载入 当作[Grub4Dos菜单文件]载入 
# 显示文本内内容


#添加菜单函数组
#挂载为[光盘]并启动
function funcAddCD {
	set added_menu="${added_menu} funcAddCD";
	funcGetSequence;
	menuentry "[$sequence] Grub4Dos挂载为[光盘]并启动 (文件挂载)"   --hotkey="$sequence"{
		funcToG4dPath "${list_dir}";
		set img="${str}";
		funcToG4dPath "${prefix}/Config/Bin/Grub4dos";
		set g4d="command $str nomem cd $img";
		linux "${prefix}/Config/Bin/Grub4dos.gz" --config-file=${g4d};
		boot;
	}

	funcGetSequence;
	menuentry "[$sequence] Grub4Dos挂载为[光盘]并启动 (载入到内存)" --hotkey="$sequence"{
		funcToG4dPath "${list_dir}";
		set img="${str}";
		funcToG4dPath "${prefix}/Config/Bin/Grub4dos";
		set g4d="command $str mem cd $img";
		linux "${prefix}/Config/Bin/Grub4dos.gz" --config-file=${g4d};
		boot;
	}

	funcGetSequence;
	menuentry "[$sequence] Memdisk 挂载为[光盘]并启动 (载入到内存)"  --hotkey="$sequence"{
		echo;
		echo "Loading ${list_dir} ...";
		linux16 "${prefix}/Config/Bin/MemDisk.gz" iso raw;
		initrd16 "${list_dir}";
		boot;
	}
}
#挂载为[硬盘]并启动
function funcAddHD {
	set added_menu="${added_menu} funcAddHD";
	funcGetSequence;
	menuentry "[$sequence] Grub4Dos挂载为[硬盘]并启动 (文件挂载)"   --hotkey="$sequence"{
		funcToG4dPath "${list_dir}";
		set img="${str}";
		funcToG4dPath "${prefix}/Config/Bin/Grub4dos";
		set g4d="command $str nomem hd $img";
		linux "${prefix}/Config/Bin/Grub4dos.gz" --config-file=${g4d};
		boot;
	}

	funcGetSequence;
	menuentry "[$sequence] Grub4Dos挂载为[硬盘]并启动 (载入到内存)" --hotkey="$sequence"{
		funcToG4dPath "${list_dir}";
		set img="${str}";
		funcToG4dPath "${prefix}/Config/Bin/Grub4dos";
		set g4d="command $str mem hd $img";
		linux "${prefix}/Config/Bin/Grub4dos.gz" --config-file=${g4d};
		boot;
	}

	funcGetSequence;
	menuentry "[$sequence] Memdisk 挂载为[硬盘]并启动 (载入到内存)"  --hotkey="$sequence"{
		echo;
		echo "Loading ${list_dir} ...";
		linux16 "${prefix}/Config/Bin/MemDisk.gz" harddisk raw;
		initrd16 "${list_dir}";
		boot;
	}
}
#挂载为[软盘]并启动
function funcAddFD {
	set added_menu="${added_menu} funcAddFD";
	funcGetSequence;
	menuentry "[$sequence] Grub4Dos挂载为[软盘]并启动 (文件挂载)"   --hotkey="$sequence"{
		funcToG4dPath "${list_dir}";
		set img="${str}";
		funcToG4dPath "${prefix}/Config/Bin/Grub4dos";
		set g4d="command $str nomem fd $img";
		linux "${prefix}/Config/Bin/Grub4dos.gz" --config-file=${g4d};
		boot;
	}

	funcGetSequence;
	menuentry "[$sequence] Grub4Dos挂载为[软盘]并启动 (载入到内存)" --hotkey="$sequence"{
		funcToG4dPath "${list_dir}";
		set img="${str}";
		funcToG4dPath "${prefix}/Config/Bin/Grub4dos";
		set g4d="command $str mem fd $img";
		linux "${prefix}/Config/Bin/Grub4dos.gz" --config-file=${g4d};
		boot;
	}

	funcGetSequence;
	menuentry "[$sequence] Memdisk 挂载为[软盘]并启动 (载入到内存)"  --hotkey="$sequence"{
		echo;
		echo "Loading ${list_dir} ...";
		linux16 "${prefix}/Config/Bin/MemDisk.gz" floppy raw;
		initrd16 "${list_dir}";
		boot;
	}
}
#当作[Grub2菜单文件]载入
function funcAddCFG {
	set added_menu="${added_menu} funcAddCFG";
	funcGetSequence;
	menuentry "[$sequence] 当作[Grub2菜单文件]载入"  --hotkey="$sequence"{
		funcGetDevName "${list_dir}";
		set root="${str}";
		configfile "${list_dir}";
	}
}
#当作[Grub4Dos菜单文件]载入
function funcAddLST {
	set added_menu="${added_menu} funcAddLST";
	funcGetSequence;
	menuentry "[$sequence] 当作[Grub4Dos菜单文件]载入" --hotkey="$sequence"{
		funcToG4dPath "${list_dir}";
		set g4d="configfile ${str}";
		linux "${prefix}/Config/Bin/Grub4dos.gz" --config-file=${g4d};
		boot;
	}
}
#当作[Grub4Dos批处理]载入
function funcAddBAT {
	set added_menu="${added_menu} funcAddBAT";
	funcGetSequence;
	menuentry "[$sequence] 当作[Grub4Dos批处理]载入" --hotkey="$sequence"{
		funcToG4dPath "${list_dir}";
		set g4d="command ${str}";
		linux "${prefix}/Config/Bin/Grub4dos.gz" --config-file=${g4d};
		boot;
	}
}
#当作[Windows引导文件]运行
function funcAddWIN {
	set added_menu="${added_menu} funcAddWIN";
	funcGetSequence;
	menuentry "[$sequence] 当作[Windows引导文件]运行"  --hotkey="$sequence"{
		echo;
		echo "Loading ${list_dir} ...";
		funcGetDevName "${list_dir}";
		set root="${str}";
		regexp --set=devnum 'hd([0-9]+)' $root;
		if test "$devnum" != "0"; then
			drivemap --swap (hd0) ${root};
		fi;
		ntldr ${list_dir};
		boot;
	}
}
#当作[Grub引导文件]运行
function funcAddGRUB {
	set added_menu="${added_menu} funcAddGRUB";
	funcGetSequence;
	menuentry "[$sequence] 当作[Grub引导文件]运行"  --hotkey="$sequence"{
		echo;
		echo "Loading ${list_dir} ...";
		linux ${list_dir};
		boot;
	}
}
#显示文本内容
function funcAddTXT {
	set added_menu="${added_menu} funcAddTXT";
	funcGetSequence;
	menuentry "[$sequence] 显示文本内容"  --hotkey="$sequence"{
		set pager=1;
		cat "${list_dir}";
		echo;
		echo;
		echo "End of file!";
		echo;
		echo -n "Press the [ESC] key to return...";
		sleep --interruptible 999;
	}
}
#显示全部菜单
function funcAddALL {
	menuentry "[+] 显示全部菜单"  --hotkey="+"{
		for menu in funcAddCD funcAddHD funcAddFD funcAddCFG funcAddLST funcAddBAT funcAddWIN funcAddGRUB; do
			regexp "${menu}" "${added_menu}";
			if test "$?" = "1"; then
				${menu};
			fi
		done;
	}
}


#添加显示全部菜单菜单
funcAddALL;

#检查文件格式
funcGetSequence "0";
funcGetFileExtName "${list_dir}";
if regexp '^[iI][sS][oO]$' "${str}"; then
	#iso
	funcAddCD;
elif regexp '^[iI][mM][gG]$' "${str}"; then
	#img
	funcAddHD;
	funcAddFD;
elif regexp '^[iI][mM][aA]$' "${str}"; then
	#ima
	funcAddHD;
	funcAddFD;
elif regexp '^[vV][hH][dD]$' "${str}"; then
	#vhd
	funcAddHD;
elif regexp '^[vV][hH][dD][xX]$' "${str}"; then
	#vhdx
	funcAddHD;
elif regexp '^[vV][mM][dD][kK]$' "${str}"; then
	#vmdk
	funcAddHD;
elif regexp '^[gG][zZ]$' "${str}"; then
	#gz
	funcAddCD;
	funcAddHD;
	funcAddFD;
elif regexp '^[lL][zZ][mM][aA]$' "${str}"; then
	#lzma
	funcAddCD;
	funcAddHD;
	funcAddFD;
elif regexp '^[cC][fF][gG]$' "${str}"; then
	#cfg
	funcAddCFG;
elif regexp '^[lL][sS][tT]$' "${str}"; then
	#lst
	funcAddLST;
elif regexp '^.*[nN][tT][lL][dD][rR]$' "${list_dir}"; then
	#ntldr
	funcAddWIN;
elif regexp '^.*[bB][oO][oO][tT][mM][gG][rR]$' "${list_dir}"; then
	#bootmgr
	funcAddWIN;
fi

#添加显示文本内容菜单
funcAddTXT;
#清理环境
unset devnum;
unset str;
unset sequence;
unset g4d;
unset img;
unset added_menu;