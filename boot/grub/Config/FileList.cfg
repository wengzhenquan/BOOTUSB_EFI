#显示文件列表
#--根据变量$list_dir目录列出所有子项菜单
#--选择子项时，判断是目录/文件。
#----目录：设置$list_dir变量，显示新子项菜单。
#----文件：弹出操作菜单
#变量：
#--$list_dir_this 本层菜单地址
#--$list_dir 公用,传递参数
#--$wildcard 使用的通配符，为了避免枚举盘符避免冲突

insmod regexp;
source "${prefix}/Config/Tools.cfg";
set file_list_src="${prefix}/Config/FileList.cfg";
set file_op_src="${prefix}/Config/FileOP.cfg";

#为了避免太长if结构，封装为函数
function funcListFile {
	#检测参数合法并设置通配符变量$wildcard
	if test -z "${list_dir}"; then
		#参数空则从盘符开始枚举
		set list_dir="";
		set wildcard="(*)";
	elif test -e "${list_dir}"; then
		#盘符(hd0,1)合法，(hd0)不合法
		set wildcard="/*";
	else
		echo;
		echo;
		funcErrorNoFindOrCanNotRead "${list_dir}";
		return 1;
	fi;
	#保存本层目录地址并设置list_dir可传递
	export list_dir;
	set list_dir_this="${list_dir}";
	#枚举子项
	echo;
	echo;
	echo -n "Loading  ${list_dir_this}${wildcard}  to menu...";
	#生成当前目录项,防止空目录自动跳回
	menuentry "[.] Press the [ESC] key to return" {
		echo;
		echo;
		echo "${list_dir_this}${wildcard}";
		echo;
		echo -n "Press the [ESC] key to continue...";
		sleep --interruptible 999;
	}
	for obj in "${list_dir_this}"${wildcard}; do
		#去掉路径中的“msdos”
		funcRemoveCharMSDOS "${obj}";
		set obj="$str";
		unset str;
		#检查目录/文件
		if test -d "${obj}"; then
			#目录
			menuentry "[D] ${obj}" "${obj}" {
				set list_dir="$2";
				configfile "${file_list_src}";
			}
		elif test -f "${obj}"; then
			#文件
			menuentry "[F] ${obj}" "${obj}" {
				set list_dir="$2";
				configfile "${file_op_src}";
			}
		else
			continue;
		fi;
	done;
	#清理环境
	unset obj;
	unset wildcard;
	echo "done!";
}

#调用主体函数
funcListFile;
